#+TITLE: Starter Kit Org
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Org
Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also implemented using Org-mode and [[http://git-scm.com/][git]].


** Agenda Details
Setting up org-agenda with some needed keybindings as well
*** Load agenda and set capture

#+begin_src emacs-lisp
        (global-set-key (kbd "C-c a") 'org-agenda)
        (global-set-key (kbd "C-c c") 'org-capture)
        (setq org-log-done t)


        (setq org-agenda-files (list "~/gtd/inbox.org"
                                     "~/gtd/gtd.org"
                                     "~/gtd/tickler.org"
                                     "~/org/research.org"
                                     "~/org/references/articles.org"))
        (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                       (file+headline "~/gtd/inbox.org" "Tasks")
                                       "* TODO %i%?\n%a")
                                      ("T" "Tickler" entry
                                       (file+headline "~/gtd/inbox.org" "Tickler")
                                       "* %i%? \n %U")
                                      ("a"   ; key
                                       "Article"         ; name
                                       entry             ; type
                                       (file+headline "~/org/research.org" "Article")  ; target
                                       "* %^{Title} %(org-set-tags)  :article: \n:PROPERTIES:\n:Created: %U\n:Linked: %a\n:END:\n%i\nBrief description:\n%?"  ; template
                                       :prepend t        ; properties
                                       :empty-lines 1    ; properties
                                       :created t        ; properties
                                       )  
        ))

        (setq org-refile-use-outline-path 'file)
        (setq org-refile-targets '(("~/gtd/gtd.org" :maxlevel . 3)
                                   ("~/gtd/someday.org" :level . 1)
                                   ("~/gtd/tickler.org" :maxlevel . 2)))

        (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

        (setq org-agenda-custom-commands 
              '(("R" "Research Work" tags-todo "research"
                 ((org-agenda-overriding-header "Research")
                  (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))))
        (add-to-list 'org-agenda-custom-commands 
              '("L" "Teaching" tags-todo "teaching"
                 ((org-agenda-overriding-header "Teaching")
                  (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first))))
        (add-to-list 'org-agenda-custom-commands 
              '("V" "Service" tags-todo "service"
                 ((org-agenda-overriding-header "Service")
                  (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first))))
        (add-to-list 'org-agenda-custom-commands 
              '("H" "Homework" tags-todo "home"
                 ((org-agenda-overriding-header "Homework")
                  (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first))))

        (add-to-list 'org-agenda-custom-commands
                     '("W" "Weekly review"
                       agenda ""
                       ((org-agenda-span 'week)
                        (org-agenda-start-on-weekday 0)
                        (org-agenda-start-with-log-mode t)
                        (org-agenda-skip-function
                         '(org-agenda-skip-entry-if 'nottodo 'done))
                        )))

        (add-to-list 'org-agenda-custom-commands 
              '("E" "Emails to send" tags-todo "@email"
                 ((org-agenda-overriding-header "Email")
                  )))


        (defun my-org-agenda-skip-all-siblings-but-first ()
          "Skip all but the first non-done entry."
          (let (should-skip-entry)
            (unless (org-current-is-todo)
              (setq should-skip-entry t))
            (save-excursion
              (while (and (not should-skip-entry) (org-goto-sibling t))
                (when (org-current-is-todo)
                  (setq should-skip-entry t))))
            (when should-skip-entry
              (or (outline-next-heading)
                  (goto-char (point-max))))))

        (defun org-current-is-todo ()
          (string= "TODO" (org-get-todo-state)))
#+end_src

** Exporter Settings and Helpful Packages
HTML and LaTeX exporters are shown by default. We add the Markdown exporter to the menu.
#+begin_src emacs-lisp

;; Autocomplete for orgmode
;; (require 'org-ac)
;; (org-ac/config-default)

;; Markdown exporter
(require 'ox-md)

(setq org-completion-use-ido t)
;; (require 'org-special-blocks)
;; (if window-system (require 'org-mouse))

;; Compatibility with WindMove
;; Make windmove work in org-mode:
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
;; (if window-system (require 'org-mouse))
#+end_src

** Org-Mode Hooks
Make yasnippet work properly with org-mode. 

#+begin_src emacs-lisp
;;  (defun yas/org-very-safe-expand ()
;;    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

(defun yas-org-very-safe-expand ()
  (let ((yas-fallback-behavior 'return-nil))
    (and (fboundp 'yas-expand) (yas-expand))))

(add-hook 'org-mode-hook
          (lambda ()
            (add-to-list 'org-tab-first-hook
                         'yas-org-very-safe-expand)
            ))

#+end_src

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\M-\C-n" 'outline-next-visible-heading)
              (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
              (local-set-key "\M-\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-iimage-in-org)
              ;; yasnippet (using the new org-cycle hooks)
              ;;(make-variable-buffer-local 'yas/trigger-key)
              ;;(setq yas/trigger-key [tab])
              ;;(add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
              ;;(define-key yas/keymap [tab] 'yas/next-field)
              ))
#+end_src

** Speed keys
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

See the =org-speed-commands-default= variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to =org-babel-describe-bindings=) will
display a list of the code blocks commands and their related keys.

#+begin_src emacs-lisp
  (setq org-use-speed-commands t)
#+end_src

** Code blocks
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
=org-babel-load-languages= variable, or with an elisp form like the
one below.  The customize interface of =org-babel-load-languages=
contains an up to date list of the currently supported languages.
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
   (shell . t)))
#+end_src

The next block makes org-babel aware that a lower-case 'r' in a =src= block header should be processed as R. 

#+source: add-r
#+begin_src emacs-lisp
    (add-to-list 'org-src-lang-modes
                 '("r" . ess-mode))
#+end_src

** Code block fontification
   :PROPERTIES:
   :CUSTOM_ID: code-block-fontification
   :END:

The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+end_src

Don't ask for confirmation on every =C-c C-c= code-block compile. 

#+source: turn-off-code-block-confirm
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

** Ensure the Latest Org-mode manual is in the info directory
By placing the =doc/= directory in Org-mode at the front of the
=Info-directory-list= we can be sure that the latest version of the
Org-mode manual is available to the =info= command (bound to =C-h i=).
#+begin_src emacs-lisp
  (unless (boundp 'Info-directory-list)
    (setq Info-directory-list Info-default-directory-list))
  (setq Info-directory-list
        (cons (expand-file-name
               "doc"
               (expand-file-name
                "org"
                (expand-file-name "src" dotfiles-dir)))
              Info-directory-list))
#+end_src

** Nice Bulleted Lists
#+name: org-bullets
#+begin_src emacs-lisp :tangle no
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

#+source: message-line
#+begin_src emacs-lisp
  (message "Starter Kit Org loaded.")
#+end_src
